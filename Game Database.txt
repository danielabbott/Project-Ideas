Database for games e.g. sims, tf2 (item stats etc.?)

Zig structs for data definition
    Basic types (u5, u32, f64, packed structs, etc.) are indexable
    pk_* field name denotes the primary key
    Struct fields are allowed. Basic type subfields are indexable.
    Arrays, slices, ArrayLists, BoundedArrays are blobs (strings, minecraft block data, sim personality, etc.)
    Blobs with size <= 255 are stored inline
    Enums stored as integers
    Each row has a
        bit array for nullable fields (0=null, 1=non-null)
        bit array for booleans
        bit field for unions - stores the index of the active fields
    Union fields (basic types) are indexable - fields in an inactive union field are not part of index


Primary/foreign keys and indexes defined at compile time

Changes are stored in a temporary in-memory table (one temporary table per non-volatile table)
All changes applied atomically on (auto)save (commit)

B-trees

Sync
    Only 1 thread should access the database at a time (unless database is (temporarily) in a read-only state)
    Optional table-level locking
    If locking multiple tables:
        Try locks in sequence until all locked or one is already locked
        If one is already locked: free the locks aquired so far, wait on this lock, then lock the others

Database has schema version and schema string
If schema version has changed then database must be upgraded to new schema
If schema version matches then schema string must also match exactly
Schema string contains: field names and types for all tables, indexes
