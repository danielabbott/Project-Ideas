Organisation:
	Game engine library
		Zig (with C API?)
		Rendering, sound, ui, networking, task graph, animation, etc.
		Vulkan 1.2 with fallback OpenGL 3.3 and OpenGL ES 2 renderers

	Scene editor
		Uses low level game engine library to load&save .json scene files

	Games
		Written in zig or another language using the C API
		Could have Java/Python/etc. wrapper over engine


Feature ideas:
	Multiplayer features- player movement, packet loss correction etc.
	Procedural animation
	Support both 2D and 3D
	Web export (Webgl + wasm)
	Simple physics (fps character-environment collisions & ray picking)
	Scripting language (squirrel? lua?)?
	Light baking
	Procedural animation

GUI
	Font rendering: https://github.com/danielabbott/OpenGL-Subpixel-Fonts
		VK_POLYGON_MODE_FILL_RECTANGLE_NV (VK_NV_fill_rectangle)
	Solving expressions (e.g. 2*4+5) for GUI: https://github.com/danielabbott/Arithmetic-Expressions



Mesh data grouping
	Geometry using the same vertex format is (ideally) grouped all in one vertex+index buffer
	All draws using the same buffer & pipeline are done in a single (multi)draw call
		For depth-only, only buffer & vertex shader need to be the same
			** unless fragment shader uses discard or produces translucent/transparent pixels
	Pipeline sets encapsulate 2 vulkan pipelines: render & depth-only

	Might be possible to use 1 multidraw call per view on nvidia gpus: VK_NV_device_generated_commands

	Objects with the same pipeline are sorted by mesh (might improve vertex data cache hitrate), and sorted front to back (reduce overdraw in depth-only render passes - might reduce memory write bandwidth usage)



SSAO
	Full screen pass into 4-layer half-resolution array texture
	https://developer.nvidia.com/sites/default/files/akamai/gameworks/samples/DeinterleavedTexturing.pdf
	Then kawase blur


Command buffers that only issue fullscreen draws are cached (e.g. ssao, bloom)
	Post processing as well if no HUD


SSBO draw data is in 2 buffers: geometry (per view per frame) and material (per frame)
require drawIndirectFirstInstance
Instance index is used to access the per-view geometry SSBO
Geometry data is an array of matrices and min+range (for normalised positions)
	1 geometry array per view
	Shadow map render passes & depth pass need min+range, mvp matrix, material index
	Full render pass needs ^ plus model & normal matrix per object
Material index passed to fragment shader.
Fragment shader access material SSBO
Material array contains colour, specular intensity, texture, normal map, etc.


For OpenGL 3.3 and GL ES 3.0/2.0 renderer, none of this is done. Instead, all the data is passed in a uniform block which is updated for each draw call.

For both renderers, there is a per-view uniform with the view matrix, perspective matrix, view-persp, etc.


Objects:
	Transform				Position in 3D space
	MaterialRenderer		Object to render (links to transform(s), meshes, SkeletonAnimators, etc.)
	AudioSource
	Light
	Material				Specular, texture, normal map, colour, etc.
	SkeletonAnimator		Deforms mesh by transforming armature
	MeshBuffer				VkBuffer
	MeshBufferView			Part of MeshBuffer + mesh metadata (vertex attributes, etc.)
	Pipeline				Combines the separate render & depth-ony pipelines
	DepthOnlyPipeline		Depth-only version of shader(s) for shadow maps and depth prepass
	RenderPipeline			Normal HDR shader
	Texture
	BoneTracker				Sets attached transform(s) to match transform of a bone in a SkeletonAnimator


Sorting draws:

draws = []
for material_renderer in material_renderer_pool:
	pipeline = material_renderer.pipeline.render
	buffer = material_renderer.mesh_buffer_view
	mesh_region = material_renderer.mesh_region
	for transform in material_renderer:
		if !material_renderer.isCulled(camera, transform):
			viewspace_distance = transform.getViewspaceDistance(camera)
			draws.append({material_renderer, transform})
	
	draws.sortBy(pipeline.transparent, pipeline, mesh_view, viewspace_distance, mesh_region)

Traversal & sort is done once per view so that object culling can be done and objects can be disabled per-view (e.g. to stop an object casting shadows) 

Asset types:
	Model (mesh, materials, armature, animations)
	Material
	Texture
	Audio
	Text
	Binary
	Shader

Assets are a .asset (metadata text) file and 0 or more data files.

Assets are grouped into packages
A package consists of a metadata file and 1 or more data files

Occlusion culling
	Meshes have bounding box (AABB)
	Skeleton animated meshes have AABB for each animation frame
	World transform applied to each mesh's AABB, new AABB generated
	That AABB is tested for intersection with the camera 'pyramid
	Camera pyramid starts at 0,0 (camera space) and extends out to infinity
	The near and far planes fit perfectly into this pyramid

	If any of the 8 vertices of the AABB are inside the pyramid*, there is an intersection
	If the 8 vertices surround the pyramid **, there is an intersection

	* take vertex Z coord, calculate dimensions of pyramid cross section for that Z, point in square test
	** top 4 vertices of AABB are above the pyramid, 4 right vertices to right, etc.


Characters holding objects
	Character represented by 1 or more mesh (1 mesh per material)
	1 material renderer per mesh
	Material renderers share a SkeletonAnimator

	Character transform has a child transform: hand_hold_transform
	hand_hold_transform has a BoneTracker which uses the same SkeletonAnimator as before
	Every frame, hand_hold_transform is updated to match position of a bone in the armature which represents the inside of the characters hand
	When the player is holding something, the transform for the object is added as a child of hand_hold_transform



Multithreading
	Task graph with dependencies and callbacks
	IO tasks with fixed functionality (read, write, read_full, tcp_send, etc.) plus a callback (runs on IO thread)
	
	1 worker thread per core
	Linux 5.6+: worker threads have thread-local io_uring instance
	Other OSes: 1 io thread for file read, 1 for file write, 2 (recv/send) per network socket.




